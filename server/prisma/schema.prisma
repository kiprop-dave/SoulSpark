// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(uuid())
  email         String   @unique
  emailVerified Boolean  @default(false) @map("email_verified")
  password      String?  @db.VarChar(255)
  createdAt     DateTime @default(now()) @map("created_at")

  // A user can like many users and be liked by many users
  // When two users like each other, they are matched and can start a conversation
  likes   User[] @relation("likes")
  likedBy User[] @relation("likes")

  dislikes   User[] @relation("dislikes")
  dislikedBy User[] @relation("dislikes")

  Account Account[]

  profile Profile?

  conversations Conversation[] @relation("conversationMembership")

  Message Message[]

  seenMessages Message[] @relation("seenBy")

  @@map("users")
}

model Account {
  id         String        @id @default(uuid())
  providerId String        @map("provider_id")
  provider   OauthProvider
  userId     String        @map("user_id")
  user       User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerId])
  @@map("accounts")
}

enum OauthProvider {
  Google
  Facebook
}

model Profile {
  id                  String         @id @default(uuid())
  first_name          String         @db.VarChar(50)
  last_name           String         @db.VarChar(50)
  dateOfBirth         DateTime       @map("date_of_birth")
  gender              Gender
  images              DigitalAsset[]
  bio                 String?
  languages           String[]
  zodiac              String?        @db.VarChar(50)
  education           String?        @db.VarChar(50)
  occupation          String?        @db.VarChar(50)
  interests           String[]
  diet                String?        @db.VarChar(50)
  drinking            String?        @db.VarChar(50)
  smoking             String?        @db.VarChar(50)
  pets                String?        @db.VarChar(50)
  socialMediaActivity String?        @map("social_media_activity") @db.VarChar(50)
  socials             String[]
  lookingFor          String         @map("looking_for") @db.VarChar(150)
  attraction          String         @db.VarChar(50)
  minimumAge          Int            @map("minimum_age")
  maximumAge          Int            @map("maximum_age")

  userId String @unique @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

enum Gender {
  Male
  Female
  Other
  PreferNotToSay
}

model Conversation {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  participants User[]    @relation("conversationMembership")
  messages     Message[]

  @@map("conversations")
}

model Message {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  text      String?

  seenBy User[] @relation("seenBy")

  senderId String @map("sender_id")
  sender   User?  @relation(fields: [senderId], references: [id], onDelete: Cascade)

  attachment DigitalAsset?

  gifUrl String? @map("gif_url")

  Conversation   Conversation? @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String        @map("conversation_id")

  @@map("messages")
}

model DigitalAsset {
  id            String   @id @default(uuid())
  asset_id      String   @unique
  public_id     String   @unique
  format        String   @db.VarChar(50)
  resource_type String   @db.VarChar(50)
  type          String   @db.VarChar(50)
  created_at    DateTime @default(now())
  url           String   @db.VarChar(255)
  secure_url    String   @db.VarChar(255)

  profileId String?  @map("profile_id")
  profile   Profile? @relation(fields: [profileId], references: [id], onDelete: Cascade)

  messageId String?  @unique @map("message_id")
  message   Message? @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@map("digital_assets")
}
